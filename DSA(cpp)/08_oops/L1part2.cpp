#include<iostream>
using namespace std;





class Hero{
        public:

    int health;
    int level;

    //b

    //construcot 
    Hero(){
        cout<<"constructor called"<<endl;
    }
    // construcot  parameterised
    Hero(int h,int l){
        this->health=h;
        this->level=l;

    }
    Hero(Hero& h){// using & means pass by refernec means now we are dealing with og new class 
        this->health=h.health;
        this->level=h.level;    
    }    
    /// deconstrucort
    ~Hero(){
        cout<<"decosuntrioet called"<<endl;
    }

    void print(){
        cout<<health<<endl;
        cout<<level<<endl;
    }

    // void print(){
    //     cout<<level<<endl;
    // }

    // // if the object is private to get that we use getter and setter 
    // int getHealth(){
    //     return health;


    // }
    // // set the value of the pbject withour using constrcutor
    // void setHealth(int h ){
    //     health=h;
    // }


};



int main(){
    Hero h1(44,66);
    cout<<"static"<<endl;
    // cout<<h1.health<<endl; it will be un accessable if 
    h1.print();
    Hero *ramesh=new Hero(44,66);
    cout<<"dynamic"<<endl;
    (*ramesh).print();
    // copy construcot // it copies all the object valuse form the preivois class  
    
    // pass  by refernce 
    // self made constructor (can also work woth inbuilt copy constructor )
    // heap based appraoch 
    
    // shallow copy happens  in this method if self made constructor  not used 

    Hero *bimlesh=new Hero(*ramesh);// using copy constructor that we made 
    cout<<"before changing in the main clss"<<endl;
    (*bimlesh).print();
    ramesh->health=55;// 
    cout<<"aftre changing in the main clss"<<endl;

    (*bimlesh).print();// no change in value as deep copy used 


    delete bimlesh;// for dynamic objects er have to manually 



// when used dynamic u must need a self made copy cosntructor
    Hero* arsh=new Hero;
    // stack based appraoch
    // built in copy consttructor 
    // deep copy happenig 
    Hero arshi(44,44);
    Hero jatt(arshi);//or Hero jatt=arshi //Both arshi and jatt are created on the stack.jatt is a copy of arshi.
    cout<<"copy constructor whichis inbuilt but require static declaration"<<endl;
    jatt.print();
    arshi.health=56;
    arshi.print();// value chngaed
    jatt.print();// no value changed being copied constructor aslo called deep copy 


    
//  Term	        What it means
// Shallow Copy   	Just copies the pointer → both objects share the same memory
// Deep Copy	    Allocates new memory and copies values → both objects are independent
// Default Copy     Constructor	Generated by C++ if you don’t write your own — does shallow copy
// User-defined     Copy Constructor	You write it yourself → can do deep copy





}
